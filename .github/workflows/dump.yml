name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      input_url:
        description: "Enter the file download URL"
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            unace unrar zip unzip p7zip-full p7zip-rar sharutils rar uudeview mpack \
            arj cabextract device-tree-compiler liblzma-dev python3-pip brotli \
            liblz4-tool axel gawk aria2 detox cpio rename liblz4-dev curl python3-venv

      - name: Set up Python environment and install packages
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install aospdtgen backports.lzma extract-dtb protobuf pycryptodome docopt zstandard

      - name: Define and Set URL
        id: set_url
        run: |
          URL="${{ github.event.inputs.input_url }}"
          if [[ "$URL" =~ ^https?://.*$ ]]; then
            if [[ "$URL" =~ '1drv.ms' ]]; then
              URL=$(curl -I "$URL" -s | grep location | sed -e "s/redir/download/g" -e "s/location: //g")
            fi
            echo "URL=$URL" >> $GITHUB_ENV
          else
            echo "Invalid URL provided"
            exit 1
          fi

      - name: Download File
        run: |
          if command -v aria2c > /dev/null; then
            aria2c -x16 -j"$(nproc)" "$URL"
          else
            wget -q --content-disposition --show-progress --progress=bar:force "$URL"
          fi

      - name: Extract and Process ROM File
        run: |
          FILE=$(echo "${URL##*/}" | detox)
          EXTENSION=$(echo "${URL##*.}" | detox)
          UNZIP_DIR=${FILE/.$EXTENSION/}

          mkdir -p input working
          mv "$FILE" "input/$FILE"

          if [[ ! -d "Firmware_extractor" ]]; then
            git clone -q --recurse-submodules https://github.com/AndroidDumps/Firmware_extractor
          fi
          if [[ ! -d "vmlinux-to-elf" ]]; then
            git clone -q https://github.com/marin-m/vmlinux-to-elf
          fi

          bash Firmware_extractor/extractor.sh "input/$FILE" "working/$UNZIP_DIR"

      - name: Extract Device Tree Blobs
        run: |
          if [[ -f "working/$UNZIP_DIR/boot.img" ]]; then
            extract-dtb -o "working/$UNZIP_DIR/dtb" "working/$UNZIP_DIR/boot.img"
          fi

      - name: Run a One-line Script
        run: echo Hello, world!

      - name: Finalize Processing
        run: |
          echo Processing complete.
